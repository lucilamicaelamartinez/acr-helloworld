name: Build Linux Container Image and Push to ACR
env:
  REPO_NAME: ${{ github.event.repository.name }}
on:
  workflow_dispatch:
  push:
    tags: ['v*.*.*']
    branch: [main]

permissions:
  id-token: write
  contents: read

jobs:
  getTag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
    - name: 'Get tag'
      id: tag
      uses: dawidd6/action-get-tag@v1
    - name: 'Use tag'
      run: echo "tag=${{ steps.tag.outputs.tag }}" >> "$GITHUB_OUTPUT"

  analyze:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    defaults:
      run:
        shell: bash
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
    - name: 'Set up Python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: 'Install dependencies'
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ];
        then pip install -r requirements.txt;
        fi
        echo "CODEQL_PYTHON=$(which python)" >> $GITHUB_ENV
    - name: 'Initialize CodeQL'
      uses: github/codeql-action/init@v2
      with:
        languages: python
        setup-python-dependencies: false

  test:
    needs: analyze
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4
    - name: 'Set up Python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: 'Install dependencies'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: 'Test with unittest'
      run: |
        python -m unittest discover -s tests

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: 'Run Snyk to check for vulnerabilities'
      uses: snyk/actions/python-3.10@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor

  build:
    needs: [getTag, security]
    if: ${{ !contains(github.event.head_commit.message, 'deploy') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4
    - name: 'Build and push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_NAME }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker build . -t ${{ secrets.ACR_NAME }}/${{ env.REPO_NAME }}:${{ needs.getTag.outputs.tag }}
        docker push ${{ secrets.ACR_NAME }}/${{ env.REPO_NAME }}:${{ needs.getTag.outputs.tag }}
    - name: 'Work successfully'
      id: build
      run: echo "::set-output name=status::success"
    outputs:
      status: ${{ steps.build.outputs.status }}

  deploy:
    needs: [build, getTag, security]
    if: ${{ always() && !contains(github.event.head_commit.message, 'build') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4
    - name: 'Get tag'
      id: tag
      run: |
        if [ "${{ needs.build.outputs.status }}" == 'success' ]; then
          echo "::set-output name=tag::${{ needs.getTag.outputs.tag }}"
        else
          MESSAGE=$(git log -1 --pretty=%B)
          VERSION=$(echo $MESSAGE | grep -oP 'v\d+\.\d+\.\d+')
          echo "::set-output name=tag::$VERSION"
        fi
    - name: 'Deploy Container Instancer'
      uses: azure/aci-deploy@v1
      with:
        location: eastus
        name: acr-helloworld
        resource-group: um
        image: ${{ secrets.ACR_NAME }}/${{ env.REPO_NAME }}:${{ steps.tag.outputs.tag }}
        dns-name-label: um-${{ github.run_id }}-${{ github.run_attempt }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        ports: 5000
        cpu: 1
        memory: 1

    - name: 'Logout'
      run: |
        az logout
